using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;

namespace Lokad.CodeDsl
{
	public sealed class TemplatedGenerator : IGenerateCode
	{
        public string ClassNameTemplate { get; set; }
        public string MemberTemplate { get; set; }
        public string PrivateCtorTemplate { get; set; }
        public string Namespace { get; set; }
        public string Region { get; set; }

		public TemplatedGenerator()
		{
		    Region = "Generated by Lokad Code DSL";
		    ClassNameTemplate = @"
[ProtoContract]
public sealed class {0}";

		    MemberTemplate = @"[ProtoMember({0})] public readonly {1} {2};";
		    PrivateCtorTemplate = @"
private {0} () {{}}";
		    //
		}

        public void Generate(Context context, IndentedTextWriter outer)
		{
			var writer = new CodeWriter(outer);
            if (!string.IsNullOrEmpty(Namespace))
            {
                writer.WriteLine("namespace {0}", Namespace);
                writer.WriteLine("{");
            }
            writer.Indent += 1;

            if (!string.IsNullOrEmpty(Region))
            {
                writer.WriteLine("#region {0}", Region);
            }

			WriteContext(writer, context);

            if (!string.IsNullOrEmpty(Region))
            {
                writer.WriteLine("#endregion");
            }

            writer.Indent -= 1;

            if (!string.IsNullOrEmpty(Namespace))
            {
                writer.WriteLine("}");
            }
		}

	    private void WriteContext(CodeWriter writer, Context context)
	    {
	        foreach (var contract in context.Contracts)
	        {
	            writer.Write(ClassNameTemplate, contract.Name);

	            
	            if (contract.Modifiers.Any())
	            {
                    writer.Write(" : {0}", string.Join(", ", contract.Modifiers.ToArray()));
	            }
	            writer.WriteLine();

				


	            writer.WriteLine("{");
	            writer.Indent += 1;

	            if (contract.Members.Count > 0)
	            {
	                WriteMembers(contract, writer);
	                writer.WriteLine(PrivateCtorTemplate, contract.Name);
	                writer.Write("public {0} (", contract.Name);
	                WriteParameters(contract, writer);
	                writer.WriteLine(")");
	                writer.WriteLine("{");

	                writer.Indent += 1;
	                WriteAssignments(contract, writer);
	                writer.Indent -= 1;

	                writer.WriteLine("}");
					
	            }


	            writer.Indent -= 1;
	            writer.WriteLine("}");
	        }
	    }

	    void WriteMembers(Contract contract, CodeWriter writer)
		{
			var idx = 1;
			foreach (var member in contract.Members)
			{
                writer.WriteLine(MemberTemplate, idx, member.Type, GeneratorUtil.MemberCase(member.Name));

				
				idx += 1;
			}
		}
        void WriteParameters(Contract contract, CodeWriter writer)
		{
			var first = true;
			foreach (var member in contract.Members)
			{
				if (first)
				{
					first = false;
				}
				else
				{
					writer.Write(", ");
				}
				writer.Write("{0} {1}", member.Type, GeneratorUtil.ParameterCase(member.Name));
			}
		}

        void WriteAssignments(Contract contract, CodeWriter writer)
		{
			foreach (var member in contract.Members)
			{
				writer.WriteLine("{0} = {1};", GeneratorUtil.MemberCase(member.Name), GeneratorUtil.ParameterCase(member.Name));
			}
		}
	}

    public sealed class CodeWriter
    {
        private readonly IndentedTextWriter _writer;

        public CodeWriter(IndentedTextWriter writer)
        {
            _writer = writer;
        }

        public int Indent { get { return _writer.Indent; } set { _writer.Indent = value; } }
        public void Write(string format, params object[] args)
        {
            var txt = string.Format(format, args);
            var lines = txt.Split(new[] {Environment.NewLine}, StringSplitOptions.None);
            

            for (int i = 0; i < lines.Length; i++)
            {
                bool thisIsLast = i == (lines.Length - 1);
                if (thisIsLast)
                    _writer.Write(lines[i]);
                else
                    _writer.WriteLine(lines[i]);

            }
        }

        public void WriteLine()
        {
            _writer.WriteLine();
        }

        public void WriteLine(string format, params object[] args)
        {
            
            var txt = args.Length == 0 ? format : string.Format(format, args);
            var lines = txt.Split(new[] {Environment.NewLine}, StringSplitOptions.None);
            

            foreach (string t in lines)
            {
                _writer.WriteLine(t);
            }
        }
    }
}
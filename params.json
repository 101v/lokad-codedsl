{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lokad-codedsl","google":"","body":"Lokad Contracts DSL is an optional console utility that you can run in the background. It \r\ntracks changes to files with special compact syntax and updates CS file with message \r\ncontract definitions. \r\n\r\nChanges are immediate upon saving file (and ReSharper immediately picks them). This is an improved \r\nversion of Lokad Code DSL, it supports identities and can auto-generate interfaces for \r\naggregates and aggregate state classes.\r\n\r\n**Was**:\r\n\r\n```csharp\r\nAddSecurityPassword?(SecurityId id, string displayName, string login, string password)\r\n```    \r\n**Becomes**:\r\n```csharp\r\n[DataContract(Namespace = \"Sample\")]\r\npublic partial class AddSecurityPassword : ICommand<SecurityId>\r\n{\r\n    [DataMember(Order = 1)] public SecurityId Id { get; private set; }\r\n    [DataMember(Order = 2)] public string DisplayName { get; private set; }\r\n    [DataMember(Order = 3)] public string Login { get; private set; }\r\n    [DataMember(Order = 4)] public string Password { get; private set; }\r\n \r\n    AddSecurityPassword () {}\r\n    public AddSecurityPassword (SecurityId id, string displayName, string login, string password)\r\n    {\r\n        Id = id;\r\n        DisplayName = displayName;\r\n        Login = login;\r\n        Password = password;\r\n    }\r\n}\r\n```    \r\n\r\nLokad Code DSL is used by [Lokad.CQRS](http://lokad.github.com/lokad-cqrs/) (was originally part of it) \r\nand is explained in greater detail in [BeingTheWorst Podcast](http://beingtheworst.com/) - Episode 12.\r\n\r\nYou can try this out by starting `Sample` project and then changing `Sample\\Contracts.ddd` \r\n(view [Contracts.ddd source] (http://github.com/Lokad/lokad-codedsl/blob/master/Sample/Contracts.ddd)). \r\nCode DSL tool will be regenerating corresponding contracts file as you change and \r\nsave (view [Contracts.cs source](http://github.com/Lokad/lokad-codedsl/blob/master/Sample/Contracts.cs)).\r\n\r\nCurrent DSL code generates contracts classes that are compatible with DataContracts, \r\nServiceStack.JSON and ProtoBuf.\r\n\r\nYou can get download binary from [github downloads](https://github.com/Lokad/lokad-codedsl/downloads). Sometimes even later stable version would be available by getting latest source code and building.\r\n\r\n\r\n**Lokad Code DSL** ([homepage](http://lokad.github.com/lokad-codedsl/)) is shared as open \r\nsource project by [Lokad](http://www.lokad.com) in hopes that it would benefit the community. \r\n\r\n\r\nSyntax Definitions\r\n-----------------\r\n### Namespaces\r\n\r\nAdd namespace for our messages  \r\n\r\n```csharp\r\nnamespace NameSpace\r\n```\r\n\r\n**Result:**\r\n\r\n```csharp\r\nnamespace NameSpace  \r\n{  \r\n...  \r\n}\r\n```\r\n\r\n### Data contract namespace\r\n\r\n```csharp\r\nextern \"Lokad\"\r\n```\r\n\r\n**Result:**\r\n\r\n```csharp\r\n[DataContract(Namespace = \"Lokad\")]\r\n```\r\n\r\n### Simple Contract definitions\r\n\r\n```csharp\r\nUniverse(UniverseId Id, string name)\r\n```\r\n\r\n**Result:**\r\n\r\n```csharp\r\n[DataContract(Namespace = \"Lokad\")]\r\npublic partial class Universe\r\n{\r\n    [DataMember(Order = 1)] public UniverseId Id { get; private set; }\r\n    [DataMember(Order = 2)] public string Name { get; private set; }\r\n\r\n    Universe () {}\r\n    public Universe (UniverseId id, string name)\r\n    {\r\n        Id = id;\r\n        Name = name;\r\n    }\r\n}\r\n```\r\n\r\n### Interface Shortcuts\r\n\r\nIn order to use interface in contract classes, need to create interface shortcut first, definition\r\nof interface IIdentity must be contained in C# file\r\n    \r\n```csharp\r\nif ! = IIdentity\r\n```\r\nFor the next step define simple class with one property\r\n\r\n```csharp\r\nUniverseId!(long id)\r\n```\r\n\r\n**Result:**\r\n\r\n```csharp\r\n[DataContract(Namespace = \"Lokad\")]\r\npublic partial class UniverseId : IIdentity\r\n{\r\n    [DataMember(Order = 1)] public long Id { get; private set; }\r\n    \r\n    UniverseId () {}\r\n    public UniverseId (long id)\r\n    {\r\n        Id = id;\r\n    }\r\n}\r\n```\r\n\r\n### Method Argument Constants\r\n\r\nMethod arguments constants allow us to define constant to replace method argument definition. For \r\nexample, now we can use term `dateUtc` instead full definition with argument type and name.\r\n\r\n```csharp\r\nconst dateUtc = DateTime dateUtc\r\n```\r\n\r\n###\r\n\r\nApplication service & state\r\n---------------------------\r\nDefinition of application service must begining with interface key.\r\n\r\n```csharp\r\ninterface Universe(UniverseId Id)\r\n{\r\n    // define shortcut for commands\r\n    if ? = IUniverseCommand\r\n    // define shortcut for events\r\n    if ! = IUniverseEvent<UniverseId>\r\n\r\n    CreateUniverse?(name)\r\n        // override ToString() for command\r\n        explicit \"Create universe - {name}\"\r\n        UniverseCreated!(name)\r\n        // override ToString() for event\r\n        explicit \"Universe {name} created\"\r\n}\r\n```\r\n\r\n**Result:**\r\n\r\n```csharp\r\npublic interface IUniverseApplicationService\r\n{\r\n    void When(CreateUniverse c);\r\n}\r\n\r\npublic interface IUniverseState\r\n{\r\n    void When(UniverseCreated e);\r\n}\r\n```\r\n\r\nCommand and corresponding event\r\n\r\n```csharp\r\n[DataContract(Namespace = \"Lokad\")]\r\npublic partial class CreateUniverse : IUniverseCommand\r\n{\r\n    [DataMember(Order = 1)] public UniverseId Id { get; private set; }\r\n    [DataMember(Order = 2)] public string Name { get; private set; }\r\n    \r\n    CreateUniverse () {}\r\n    public CreateUniverse (UniverseId id, string name)\r\n    {\r\n        Id = id;\r\n        Name = name;\r\n    }\r\n    \r\n    public override string ToString()\r\n    {\r\n        return string.Format(@\"Create universe - {0}\", Name);\r\n    }\r\n}\r\n\r\n[DataContract(Namespace = \"Lokad\")]\r\npublic partial class UniverseCreated : IUniverseEvent<UniverseId>\r\n{\r\n    [DataMember(Order = 1)] public UniverseId Id { get; private set; }\r\n    [DataMember(Order = 2)] public string Name { get; private set; }\r\n    \r\n    UniverseCreated () {}\r\n    public UniverseCreated (UniverseId id, string name)\r\n    {\r\n        Id = id;\r\n        Name = name;\r\n    }\r\n    \r\n    public override string ToString()\r\n    {\r\n        return string.Format(@\"Universe {0} created\", Name);\r\n    }\r\n}\r\n```\r\n\r\nSyntax Highlights\r\n-----------------\r\n\r\nSyntax used in the DSL tool is derived from keywords in C++ and C#. This means, that\r\nany text editor could provide nice highlighting, if you use language color settings\r\nfrom C++ or C#.\r\n\r\nHere's how DSL source code might look like:\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Sublime Text 2</th>\r\n<th>Visual Studio 2010</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><img src=\"https://github.com/Lokad/lokad-codedsl/raw/master/Docs/sublimeText2.PNG\" />\r\n<td><img src=\"https://github.com/Lokad/lokad-codedsl/raw/master/Docs/vs2010_csharp.PNG\" />\r\n</tr>\r\n</tbody>\r\n</table>  \r\n\r\n**Visual Studio 2010 settings**\r\n\r\nHere are the settings to set up in Visual Studio:\r\n\r\n![Visual Studio settings] (https://github.com/Lokad/lokad-codedsl/raw/master/Docs/vs2010_settings.PNG)\r\n\r\n\r\nRelated articles\r\n-----------\r\n* **Tutorial**: [Extending Lokad DSL Tool](http://zbz5.net/extending-lokad-dsl-tool) by [Vidar Løvbrekke Sømme](https://twitter.com/vidarls)\r\n* [Improved DSL Syntax for DDD and Event Sourcing] (http://abdullin.com/journal/2012/7/25/improved-dsl-syntax-for-ddd-and-event-sourcing.html)\r\n\r\nFeedback\r\n--------\r\n\r\nPlease, feel free to drop feedback in the [Lokad Community](https://groups.google.com/forum/#!forum/lokad).\r\n","tagline":"Streamline .NET contract generation with Visual Studio."}